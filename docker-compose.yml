services:
  frontend:   # Name of the service
    # Build the docker image from the Dockerfile.frontend thats in the cirrostrats-frontend directory
    build:
      context: ./cirrostrats-frontend     # Defines working directory from which the Docker will read files to build image. Docker can only access files within the context directory.
      dockerfile: Dockerfile.frontend
    ports:    #
      # Format is "HOST_PORT:CONTAINER_PORT". Mounts the port 5173 on the host to the port 5173 on the container. HOST_PORT can be accessed from the machine's browser at http://localhost:5173
      - "5173:5173"
    volumes:  # mount the cirrostrats-frontend directory on the host to the /app directory on the container
      - ./cirrostrats-frontend:/app
      - node_modules:/app/node_modules     # This prevents overwriting the node_modules directory inside the container with the potentially empty node_modules directory on your host machine.
      # Without this^^, the node_modules directory inside the container would be erased because the ./cirrostrats-frontend folder from the host does not typically contain node_modules unless npm install has been run locally.
      # Ensures node_modules is container-specific and avoids conflicts between host and container dependencies.

      # - /app/package-lock.json/
    networks:     # Connect the frontend service to the base network that all containers will share.
      - base-network
    environment:
      - CHOKIDAR_USEPOLLING=true  # Enables polling for file changes, useful for detecting updates in mounted volumes on systems like Docker Desktop for Windows/Mac.
      - WATCHPACK_POLLING=true   # Ensures compatibility with polling-based file watchers, especially for live-reloading in development environments.

  backend:
    build:
    # Build the docker image from the Dockerfile.backend in the cirrostrats-backend directory
      context: ./cirrostrats-backend
      dockerfile: Dockerfile.backend
    container_name: cirrostrats-backend
    hostname: backend
    ports:
      # Format is "HOST_PORT:CONTAINER_PORT"
      - "8000:8000"
    volumes:
      - ./cirrostrats-backend:/app
    networks:
      - base-network
      - cirrostrats-network  # Shared network with observability stack
    environment:
      # Application config
      - ENV=dev
      - SERVICE_NAME=cirrostrats-backend-api
      - SERVICE_VERSION=1.0.0
      # OpenTelemetry config - connects to observability stack
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_SERVICE_NAME=cirrostrats-backend-api
      - OTEL_RESOURCE_ATTRIBUTES=deployment.environment=dev,service.version=1.0.0
    env_file:
      - ./cirrostrats-backend/.env
    labels:
      - "logging=promtail"
      - "metrics.scrape=true"
      - "metrics.port=8000"
      - "metrics.path=/metrics"

  nginx:
    image: nginx
    ports:
      # Format is "HOST_PORT:CONTAINER_PORT"
      - "80:80"
    volumes:    # If working on nginx and want changes to be reflected in the container, use the volumes
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    # TODO: Check what the difference is between the above^^ and this - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - backend
    networks:
      - base-network
  
  redis:
    # deploy:   # This was used previously to prevent it from spawning in development. Accompany with .env file and set Run_Celery=1 if using this feature in production.
      # replicas: ${RUN_CELERY:-0}  # Defaults to 0 containers: no Celery in development
    image: redis
    ports:
      # Format is "HOST_PORT:CONTAINER_PORT"
      - "6379:6379"     # TODO: What is the significance of this port?
    networks:
      - base-network
    profiles:     # use docker compose --profile production up in the production environment
      - production

  celery:
    # deploy:   # This was used previously to prevent it from spawning in development. Accompany with .env file and set Run_Celery=1 if using this feature in production.
      # replicas: ${RUN_CELERY:-0}  # Defaults to 0 containers: no Celery in development
    container_name: celery_worker
    build:
      context: ./cirrostrats-backend      # This is where the celery_app.py file is
      dockerfile: routes/Dockerfile.celery   # use this if you want to build the docker image from the Dockerfile.celery and isolate the command from the rest of the Dockerfile
    command: celery -A routes.celery_app worker --loglevel=info      # Execute the tasks defined in celery_app.py This takes preecedence over the dockerfile command
    depends_on:
      - redis
    volumes:      # Changes are not reflected instantly in celery. Restart container to see changes.
      - ./cirrostrats-backend:/app
    networks:
      - base-network
    profiles:     # use docker compose --profile production up in the production environment
      - production

  celery-beat:
    # deploy:   # This was used previously to prevent it from spawning in development. Accompany with .env file and set Run_Celery=1 if using this feature in production.
      # replicas: ${RUN_CELERY:-0}  # Defaults to 0 containers: no Celery in development
    container_name: celery_beat
    build:
      context: ./cirrostrats-backend      # This is where the celery_app.py file is
      dockerfile: routes/Dockerfile.celery
    command: celery -A routes.celery_app beat --loglevel=info      # This takes preecedence over the dockerfile command
    depends_on:
      - redis
      - celery
    volumes:      # Changes are not reflected instantly in celery. Restart container to see changes.
      - ./cirrostrats-backend:/app
    networks:
      - base-network
    profiles:     # use docker compose --profile production up in the production environment
      - production


networks:
  base-network:
    driver: bridge

  # Shared network with observability stack
  cirrostrats-network:
    external: true

volumes:
  node_modules:

